Introduction
============

`KU virus discovery pipeline <https://github.com/KijinKims/KU-virus-discovery-pipeline>`_ aims to find out virus-originated sequences from NGS throughput by performing several analyses. Currently, either Illumina or Nanopore input is supported.

Initially, it was developed for the internal use of the Molecular Virology Lab in Korea University College of Medicine. It has contributed to the discovery of a new virus in the lab. 
Since it follows the standard virus identification pipeline paradigm, there is no novelty in the theoretical aspect. But if you are looking for a ready-made virus discovery pipeline, you can freely clone and modify the code for your needs.

Quick start for researchers having pre-installed pipeline
#########################################################

If I, Kijin Kim, personally installed the pipeline in your(or your institution's) computer, please follow the below instruction.

First activate the pipeline conda environment by

`conda activate ku_pipeline_env`

Then, you can simply use the pipeline in two ways.

`kuwrapper [platform] \-\-fastq [fastq path] (\-\-fastq2 [fastq2 path]) \-\-prefix [prefix] \-\-host [host]`

or

`kuwrapper [platform] -f [input list as file]`

Let's call the above mode as single file mode and the bottom one as multiple files mode.
Note that before listing options, you need to write the `platform` from which your data came. For every run, you need to specify at least one(for nanopore sequencing) or two(for illumina paired sequencing) `fastq` files, one `prefix` and one `host` parameters. `prefix` denotes the name to be given for the run. `host` indicates the academic name of host that is your data's biological origin. So far, there are limited numbers of supported hosts. You can look them up by typing `kuwrapper host`. These paramters are all you need to run in single file mode.

From my experience, it is really annoying to run many input files one by one by spawning new terminal for each input. That's why I created the multiple files mode. This mode only necessitates one paratmer `input list as file`. But this file needs to be in specific format. As I said above, every run needs at least three parameters `fastq`, `prefix` and `host`. The input file shoud have each paramter name as column header in a tab-delimited way. And each run should be appended as one row for each with corresponding values filled. I suppose you feel confused, so I prepared the example.

.. list-table:: example_input_file.txt
   :widths: 25 25 25
   :header-rows: 1

   * - fastq
     - prefix
     - host
   * - human21-01.fastq
     - human_1
     - homo sapiens
   * - rat21-01.fastq
     - rat_1
     - rattus norvegicus

NOTE! every value should be split by TAB!

If your inputs are in order, pipeline will work as expected. (if I told you the pipeline is ready to be used...)

Pipeline Structure
##################

If you are not familiar with NGS-based virus identification/discovery, I recommend you to read `this paper <https://www.mdpi.com/1072574>`_. 

As a preliminary step, sequencing reads are filtered by read length and quality. The remaining reads are aligned to the host genome, and aligned reads are excluded from the following analysis.

The current version does three types of analysis for input data.

Reference mapping
*****************
If you already know the kind of virus you want to study and have its genome sequence, you can simply map the sequenced reads onto its genome. If the virus truly exists in the sample, the genome will be covered at most regions in high depth.

Read classification
*******************
Reads can be classified as a taxon by comparing their subsequence (or k-mer) to a database of subsequences of known genomes. The advantage of this analysis is we can guess the abundance of taxa by considering the number of reads classified to them, which can be visualized as a heat map, pie chart, etc.

De novo assembly
****************
Viral genomes are fragmented during the first step of NGS. If we can recover the whole or part of the genome, it would be the best way to identify the virus genome. It is practically the only way to discover a new virus in NGS.
By concatenating the reads that overlap, we can assemble the reads into long sequences called contigs. This step is called De novo assembly. 

For the assembled contigs, various analyses can be carried out. Currently, this pipeline only does a similarity-based search on contigs using BLAST and Diamond. More analysis modules will be added in the future. (e.g., HMM search)

Warning
#######

- The pipeline is only validated for a dataset generated by a specific protocol, which is unavailable online. You need to optimize the pipeline with different parameter sets for your dataset.

- I don't know if this pipeline efficiently works in a desktop environment. I only ran it on a workstation.

- This pipeline is not the implementation of a publication. So, there's no warranty.